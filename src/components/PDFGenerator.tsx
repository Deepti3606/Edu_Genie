import React from 'react';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { Download, FileText } from 'lucide-react';

interface PDFGeneratorProps {
  lessonPlan: any;
  quiz?: any;
  videos?: any[];
}

export const PDFGenerator: React.FC<PDFGeneratorProps> = ({ lessonPlan, quiz, videos }) => {
  const generatePDF = async () => {
    const pdf = new jsPDF('p', 'mm', 'a4');
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    let yPosition = 20;

    // Helper function to add text with word wrapping
    const addText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
      pdf.setFontSize(fontSize);
      if (isBold) pdf.setFont('helvetica', 'bold');
      else pdf.setFont('helvetica', 'normal');
      
      const lines = pdf.splitTextToSize(text, pageWidth - 40);
      
      if (yPosition + (lines.length * fontSize * 0.35) > pageHeight - 20) {
        pdf.addPage();
        yPosition = 20;
      }
      
      pdf.text(lines, 20, yPosition);
      yPosition += lines.length * fontSize * 0.35 + 5;
    };

    // Title
    addText(`EduGenie Lesson Plan: ${lessonPlan.topic}`, 18, true);
    yPosition += 5;

    // Basic Info
    addText(`Subject: ${lessonPlan.subject} | Grade: ${lessonPlan.grade} | Duration: ${lessonPlan.duration} minutes`, 12);
    yPosition += 10;

    // Learning Objectives
    addText('Learning Objectives:', 14, true);
    lessonPlan.learningObjectives?.forEach((objective: string, index: number) => {
      addText(`${index + 1}. ${objective}`, 11);
    });
    yPosition += 5;

    // Lesson Structure
    addText('Lesson Structure:', 14, true);
    lessonPlan.lessonStructure?.forEach((section: any) => {
      addText(`${section.section} (${section.duration})`, 12, true);
      section.activities?.forEach((activity: string) => {
        addText(`â€¢ ${activity}`, 11);
      });
      yPosition += 3;
    });

    // Amazing Facts
    if (lessonPlan.amazingFacts) {
      addText('Amazing Facts:', 14, true);
      lessonPlan.amazingFacts.forEach((fact: string, index: number) => {
        addText(`ðŸŒŸ ${fact}`, 11);
      });
      yPosition += 5;
    }

    // Fun Jokes
    if (lessonPlan.jokes) {
      addText('Fun Learning Moments:', 14, true);
      lessonPlan.jokes.forEach((joke: string) => {
        addText(`ðŸ˜„ ${joke}`, 11);
      });
      yPosition += 5;
    }

    // Activities
    addText('Activities:', 14, true);
    lessonPlan.activities?.forEach((activity: any) => {
      addText(`${activity.name} (${activity.duration})`, 12, true);
      addText(activity.description, 11);
      if (activity.materials) {
        addText(`Materials: ${activity.materials.join(', ')}`, 10);
      }
      yPosition += 3;
    });

    // Assessment Questions
    if (quiz) {
      pdf.addPage();
      yPosition = 20;
      addText('Quiz Questions:', 16, true);
      yPosition += 5;

      // Multiple Choice Questions
      if (quiz.multipleChoice) {
        addText('Multiple Choice Questions:', 14, true);
        quiz.multipleChoice.forEach((q: any, index: number) => {
          addText(`${index + 1}. ${q.question}`, 12, true);
          q.options?.forEach((option: string, optIndex: number) => {
            const letter = String.fromCharCode(65 + optIndex);
            addText(`${letter}) ${option}`, 11);
          });
          addText(`Answer: ${q.correctAnswer}`, 10);
          yPosition += 3;
        });
      }

      // Short Answer Questions
      if (quiz.shortAnswer) {
        addText('Short Answer Questions:', 14, true);
        quiz.shortAnswer.forEach((q: any, index: number) => {
          addText(`${index + 1}. ${q.question}`, 12, true);
          if (q.sampleAnswer) {
            addText(`Sample Answer: ${q.sampleAnswer}`, 10);
          }
          yPosition += 3;
        });
      }
    }

    // Video Resources
    if (videos && videos.length > 0) {
      addText('Recommended Videos:', 14, true);
      videos.forEach((video: any, index: number) => {
        addText(`${index + 1}. ${video.title}`, 12, true);
        addText(`Channel: ${video.channelTitle}`, 10);
        addText(`URL: ${video.url}`, 10);
        yPosition += 3;
      });
    }

    // Homework
    if (lessonPlan.homework) {
      addText('Homework:', 14, true);
      lessonPlan.homework.forEach((task: string, index: number) => {
        addText(`${index + 1}. ${task}`, 11);
      });
    }

    // Footer
    pdf.setFontSize(8);
    pdf.setTextColor(128, 128, 128);
    pdf.text('Generated by EduGenie - AI-Powered Education Platform', 20, pageHeight - 10);
    pdf.text(`Created on: ${new Date().toLocaleDateString()}`, pageWidth - 60, pageHeight - 10);

    // Save the PDF
    pdf.save(`${lessonPlan.topic}_lesson_plan.pdf`);
  };

  return (
    <button
      onClick={generatePDF}
      className="flex items-center px-4 py-2 bg-red-600 text-white rounded-xl hover:bg-red-700 transition-colors"
    >
      <Download className="h-4 w-4 mr-2" />
      Download PDF
    </button>
  );
};